#!/bin/bash
# stjude_chipseq_parameter_wrapper 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

set -e -x -o pipefail

main() {
    if [ "$genome"  == "dm3" ]; then rm_blackList="false"; fi
    out_folder=$(jq --raw-output ".folder" <<< $(dx describe --json $DX_JOB_ID))

    echo "Value of out_prefix: '$out_prefix'"
    echo "Value of genome: '$genome'"
    echo "Value of bw_out: '$bw_out'"
    echo "Value of rm_blackList: '$rm_blackList'"
    echo "Value of fragment_size: '$fragment_size'"
    echo "Value of out_folder: '$out_folder'"

    echo "export out_folder=$out_folder" > $out_prefix.parameters.txt
    echo "export out_prefix=$out_prefix" >> $out_prefix.parameters.txt
    echo "export genome=$genome" >> $out_prefix.parameters.txt
    echo "export bw_out=$bw_out" >> $out_prefix.parameters.txt
    echo "export rm_blackList=$rm_blackList" >> $out_prefix.parameters.txt
    echo "export fragment_size=$fragment_size" >> $out_prefix.parameters.txt
    echo "export ChIP_fastq_name=$ChIP_fastq_prefix" >> $out_prefix.parameters.txt
    echo "export Control_fastq_name=$Control_fastq_prefix" >> $out_prefix.parameters.txt

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.
    
    # check input data
    if [ "$ChIP_fastq" == "$Control_fastq" ]; then
	dx-jobutil-report-error "ChIP fastq file is the same with Control fastq file" AppError 
    fi
    echo "Input fastq tested."    

    unset DX_WORKSPACE_ID
    dx cd $DX_PROJECT_CONTEXT_ID:
    new_file_sig=0
    for i in `echo "$out_folder/Results/$out_prefix/" | perl -e '$line=<STDIN>; print join("\n", split(/\//, "$line")), "\n";' | grep -vP "^$"`
    do
	dx pwd
	dx ls
	has_file=0;
	for j in `dx ls`
	do
	    j=$(echo $j|sed 's/\/$//')
	    if [ "$j" == "$i" ]; then has_file=1; fi
	done
	if [ "$has_file" == "1" ]; then 
	    dx cd $i; 
	else 
	    echo "$i is new"; 
	    new_file_sig=1; 
	    break; 
	fi 
    done
    echo "Output directory tested: $new_file_sig"
    
    dx cd $DX_PROJECT_CONTEXT_ID:/
    if [ "$new_file_sig" == "0" ]; then
        dCont=$(dx ls "$DX_PROJECT_CONTEXT_ID":"$out_folder/Results/$out_prefix/") 
        echo "Number of files in this folder: ${#dCont}"
        if [ "${#dCont}" -gt 0 ];then
    	    dx-jobutil-report-error "Output folder contains data" AppError
        fi
    fi
    echo "No data in the output directory."    

    dx mkdir -p "$DX_PROJECT_CONTEXT_ID":"$out_folder/Results/$out_prefix/"
    parameter_file=$(dx upload --path $out_folder/Results/$out_prefix/ $out_prefix.parameters.txt --brief)
#    mkdir -p $out_folder/Results/$out_prefix/
#    mv $out_prefix.parameters.txt $out_folder/Results/$out_prefix/
#    parameter_file=$(dx upload -r $out_folder/Results/$out_prefix/$out_prefix.parameters.txt --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output parameter_file "$parameter_file" --class=file
}
