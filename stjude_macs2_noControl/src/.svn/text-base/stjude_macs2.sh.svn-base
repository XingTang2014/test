#!/bin/bash
# stjude_macs2 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of ChIP_bam: '$ChIP_bam'"
    echo "Value of Control_bam: '$Control_bam'"
    echo "Value of genome: '$genome'"
    echo "Value of out_prefix: '$out_prefix'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    echo ""
    echo "=== Setup ==="
    sudo apt-get install libsigsegv2
    export PATH=/user/bin:$PATH
    gawk --version

    echo "install spp ..."
    R --version
    R CMD INSTALL /home/bitops_1.0-6.tar.gz
    R CMD INSTALL /home/caTools_1.17.1.tar.gz
    R CMD INSTALL /home/snow_0.4-1.tar.gz
    R CMD INSTALL /home/phantompeakqualtools/spp_1.10.1.tar.gz
    #R CMD INSTALL /home/spp_1.11.tar.gz
    
    echo "install bedtools ..."
    sudo apt-get install bedtools
    echo "install macs2 ..."
    sudo apt-get install python-numpy 
    cd /home/dnanexus/MACS2-2.1.1.20160309 
    python setup.py install
    cd

    echo "  [*] Downloading input files..." 
    dx download "$ChIP_bam" -o ChIP.bam
    dx download "$Control_bam" -o Control.bam
        
        ################
        # Housekeeping #
        ################

        echo "  [*] Performing some housekeeping..."

        # Path setup 
        export PATH=$PATH:/home/dnanexus/samtools-0.1.18

    #############################################
    # remove multiple mapped reads and duplicates
    #############################################

    echo "removing multiple mapped reads and duplicates ..."
    samtools view -hb -q 1 ChIP.bam | samtools rmdup - ChIP_processed.bam
    samtools view -hb -q 1 Control.bam | samtools rmdup - Control_processed.bam
    ls

    #############################################
    # run MACS2
    #############################################

    echo "Calling peaks with MACS2 ..."
    if [ $is_out_wig == "true" ]; then 
    macs2 callpeak -t ChIP_processed.bam -c Control_processed.bam -g $genome -f BAM --outdir ${out_prefix}_macs2  -n $out_prefix -B
    else 
    macs2 callpeak -t ChIP_processed.bam -c Control_processed.bam -g $genome -f BAM --outdir ${out_prefix}_macs2  -n $out_prefix
    fi
   

    #############################################
    # remove black list
    #############################################
    echo "Removing peaks overlapped with black list ..."
    if [ $genome == "mm" ]; then
	black_list=/home/mm9-Blacklist.bed
    fi
    if [ $genome == "hs" ]; then
	black_list=/home/Hg19_Blacklist.bed
    fi

    bedtools subtract -a <(awk '{if($1 !~ /^chr/) {print "chr"$_} else {print $_} }' ${out_prefix}_macs2/${out_prefix}_peaks.narrowPeak) -b $black_list > ${out_prefix}_macs2/${out_prefix}_peaks.narrowPeak.clean.bed
    bedtools subtract -a <(awk '{if($1 !~ /^chr/) {print "chr"$_} else {print $_} }' ${out_prefix}_macs2/${out_prefix}_summits.bed) -b $black_list > ${out_prefix}_macs2/${out_prefix}_summits.clean.bed


    #############################################
    # run spp cross correlation
    #############################################
    echo "run spp cross correlation ..."
    Rscript /home/phantompeakqualtools/run_spp.R -c=ChIP_processed.bam -savp=${out_prefix}_macs2/phantomPeak_ChIP.pdf -out=${out_prefix}_macs2/phantomPeak_ChIP.out
    Rscript /home/phantompeakqualtools/run_spp.R -c=Control_processed.bam -savp=${out_prefix}_macs2/phantomPeak_Control.pdf -out=${out_prefix}_macs2/phantomPeak_Control.out
#R --slave <<EOF
#library("spp")
#library("snow")
#cluster <- makeCluster(8)
#chip.data <- read.bam.tags("ChIP_processed.bam")
#binding.characteristics <- get.binding.characteristics(chip.data,srange=c(50,500),bin=5, cluster=cluster)
#pdf(file="${out_prefix}_macs2/${out_prefix}.crosscorrelation.pdf",width=5,height=5)
#par(mar = c(3.5,3.5,1.0,0.5), mgp = c(2,0.65,0), cex = 0.8);
#plot(binding.characteristics\$cross.correlation,type='l',xlab="strand shift",ylab="cross-correlation");
#abline(v=binding.characteristics\$peak\$x,lty=2,col=2)
#dev.off();
#EOF


    tar -cf ${out_prefix}_macs2.tar ${out_prefix}_macs2

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    # dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    peak_file=$(dx upload ${out_prefix}_macs2.tar --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output peak_file "$peak_file" --class=file
    
}
