#!/bin/bash
# stjude_viewer_shortcut 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.

main() {

    echo "Value of view_files: '${view_files[@]}'"
    echo "Value of parameter_file: '$parameter_file'"
    echo "Value of genome: '$genome'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".
    sudo apt-get update
    sudo apt-get install -y python3

    if [ -n "$parameter_file" ]
    then
        dx download "$parameter_file" -o parameter_file
        source parameter_file
    fi

    input_files=""
    for i in ${view_files[@]}
    do
	input_files=$input_files,$i
    done
    echo $input_files

    # Fill in your application code here.
    #
    # To report any recognized errors in the correct format in
    # $HOME/job_error.json and exit this script, you can use the
    # dx-jobutil-report-error utility as follows:
    #
    #   dx-jobutil-report-error "My error message"
    #
    # Note however that this entire bash script is executed with -e
    # when running in the cloud, so any line which returns a nonzero
    # exit code will prematurely exit the script; if no error was
    # reported in the job_error.json file, then the failure reason
    # will be AppInternalError with a generic error message.

    # The following line(s) use the dx command-line tool to upload your file
    # outputs after you have created them on the local file system.  It assumes
    # that you have used the output field name for the filename for each output,
    # but you can change that behavior to suit your needs.  Run "dx upload -h"
    # to see more options to set metadata.

    if [ "$genome" == "GRCh38" ]; then genome=hg38; fi
    viewer=`dx ls project-F5444K89PZxXjBqVJ3Pp79B4:/viewers/ProteinPaint\ \($genome\)\ \(VCF,\ bigWig\) --brief`
    ./make_dnanexus_shortcut -v $viewer -f "$input_files" -o $out_prefix.view -a "$DX_PROJECT_CONTEXT_ID:$out_folder/Results/${out_prefix}/MACS2/"

    dx describe $out_prefix.view
    dx close $out_prefix.view
    dx-jobutil-add-output viewer_shortcut --class=record $out_prefix.view 

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.
}
